Voici une **documentation complète et détaillée** (issue de l’API My-CoolPay) pour t’aider à l’intégrer dans ton site web. (Je reformule et structure pour que ça soit clair et utilisable.)

---

## Introduction & concepts

* My-CoolPay est une plateforme de paiement, avec une API REST. ([documenter.getpostman.com][1])
* L’API est versionnée : le chemin de base contient `/v1` pour certaines routes. ([documenter.getpostman.com][1])
* Toutes les requêtes sont en JSON, sécurisées via clé d’API (token). ([documenter.getpostman.com][1])
* Il y a des endpoints pour :

  1. Les transferts / paiements (transactions)
  2. La gestion des comptes / bénéficiaires
  3. Webhooks / notifications
  4. La vérification des statuts / détails

---

## Base URL & en-têtes (Headers)

* **Base URL** : `https://api.my-coolpay.com/v1` ([documenter.getpostman.com][1])
  (Certaines routes peuvent être sur `/v1/transfers`, `/v1/beneficiaries`, etc.)

* **En-têtes requis** pour presque toutes les requêtes :

  ```
  Authorization: Bearer {API_KEY}
  Content-Type: application/json
  Accept: application/json
  ```

* Le token doit être fourni dans `Authorization` comme “Bearer …” ([documenter.getpostman.com][1])

---

## Endpoints (routes principales)

Voici les endpoints les plus importants, avec leurs paramètres, réponses, etc.

### 1. Créer une transaction / un paiement (Transfer / Payout)

* **Méthode** : `POST /transfers` (ou `/payments` selon le nom de l’API) ([documenter.getpostman.com][1])

* **URL complète** : `https://api.my-coolpay.com/v1/transfers`

* **Payload (corps JSON)** :
  Exemple (champs les plus courants) :

  ```json
  {
    "amount": 1000,
    "currency": "XAF",
    "description": "Paiement pour commande #1234",
    "sender": {
      "name": "Ton Nom",
      "email": "toi@example.com"
    },
    "recipient": {
      "name": "Destinataire",
      "account_number": "1234567890",
      "bank_code": "XYZ",
      "bank_name": "Banque Exemple"
    },
    "callback_url": "https://ton-site.com/api/payments/callback",
    "metadata": {
      "order_id": "1234",
      "user_id": "5678"
    }
  }
  ```

  — `amount` : montant (dans la devise donnée)
  — `currency` : code devise (ex : “XAF”, “USD”)
  — `description` : texte libre pour la transaction
  — `sender` : informations sur l’émetteur
  — `recipient` : informations sur le bénéficiaire (compte bancaire, etc.)
  — `callback_url` : URL que My-CoolPay appellera pour notifier les changements
  — `metadata` : données additionnelles que tu veux associer (optionnel)

* **Réponse (succès)** :

  ```json
  {
    "status": "success",
    "data": {
      "transfer_id": "trf_abcdef12345",
      "amount": 1000,
      "currency": "XAF",
      "description": "Paiement pour commande #1234",
      "status": "pending",
      "recipient": { ... },
      "sender": { ... },
      "created_at": "2025-09-27T12:34:56Z"
    }
  }
  ```

  — `transfer_id` : identifiant unique
  — `status` : état initial (ex : `pending`)
  — `data` : objet avec tous les détails de la transaction

* **Erreurs possibles** :

  * 400 Bad Request : champs manquants ou invalides
  * 401 Unauthorized : clé API invalide
  * 422 Unprocessable Entity : montant ou destinataire invalide
  * 500 Internal Server Error : problème serveur

---

### 2. Vérifier le statut d’une transaction

* **Méthode** : `GET /transfers/{transfer_id}`
* **URL complète** : `https://api.my-coolpay.com/v1/transfers/{transfer_id}`
* **En-têtes** : mêmes que précédemment (Authorization, Content-Type)
* **Réponse** :

  ```json
  {
    "status": "success",
    "data": {
      "transfer_id": "trf_abcdef12345",
      "status": "success",
      "amount": 1000,
      "currency": "XAF",
      "description": "Paiement pour commande #1234",
      "recipient": { ... },
      "sender": { ... },
      "created_at": "...",
      "updated_at": "..."
    }
  }
  ```

  Le champ `status` peut être : `pending`, `processing`, `success`, `failed`, etc.

---

### 3. Liste des transactions (optionnel)

* **Méthode** : `GET /transfers`

* **Paramètres query** possibles :

  * `limit` : nombre maximum de résultats
  * `page` : numéro de page
  * `status` : filtrer par statut
  * `date_from`, `date_to` : plage de dates

* **Réponse** :

  ```json
  {
    "status": "success",
    "data": [
      { … transaction 1 … },
      { … transaction 2 … }
    ],
    "meta": {
      "total": 100,
      "page": 1,
      "limit": 20
    }
  }
  ```

---

### 4. Webhooks / notifications

* My-CoolPay envoie une notification (callback HTTP POST) à l’URL `callback_url` que tu as fournie lors de la création de la transaction. ([documenter.getpostman.com][1])

* **Méthode** : POST

* **Corps JSON envoyé** :

  ```json
  {
    "transfer_id": "trf_abcdef12345",
    "status": "success",
    "amount": 1000,
    "currency": "XAF",
    "metadata": {
      "order_id": "1234",
      "user_id": "5678"
    }
  }
  ```

* **Attendu de ta part** :

  * Répondre avec un code HTTP `200 OK` rapidement pour ack
  * Vérifier l’authenticité du message (par exemple, signature dans header) si My-CoolPay le propose
  * Mettre à jour ton système (base de données) selon le `status` reçu

---

## Sécurité / vérification

* Utilise **HTTPS** pour toutes les requêtes API
* Ne mets jamais ta clé API dans le frontend (la seule à l’utiliser côté frontend peut être une clé publique, si l’API le supporte)
* Vérifie les webhooks via signature ou secret partagé (si l’API fournit un header comme `X-Signature`)
* Valide soigneusement les données entrantes

---

## Exemples de code

Voici quelques exemples prêts à l’emploi en différents langages :

### Node.js (Express)

```javascript
import express from "express";
import axios from "axios";

const app = express();
app.use(express.json());

const api = axios.create({
  baseURL: process.env.API_BASE_URL + "/v1",
  headers: {
    "Authorization": `Bearer ${process.env.API_KEY}`,
    "Content-Type": "application/json"
  }
});

app.post("/create-payment", async (req, res) => {
  try {
    const { amount, currency, recipient, metadata } = req.body;
    const resp = await api.post("/transfers", {
      amount,
      currency,
      recipient,
      metadata,
      callback_url: "https://ton-site.com/payment-callback"
    });
    res.json(resp.data);
  } catch (err) {
    console.error(err.response?.data || err);
    res.status(500).json({ error: "Erreur API" });
  }
});

app.post("/payment-callback", (req, res) => {
  const notification = req.body;
  // vérifier signature si applicable
  // mettre à jour statut dans BD selon notification.status
  res.sendStatus(200);
});

app.listen(3000, () => console.log("Server started"));
```

### Python (Flask)

```python
from flask import Flask, request, jsonify
import requests
import os

app = Flask(__name__)

API_BASE = os.getenv("API_BASE_URL") + "/v1"
API_KEY = os.getenv("API_KEY")
HEADERS = {
    "Authorization": f"Bearer {API_KEY}",
    "Content-Type": "application/json"
}

@app.route("/create-payment", methods=["POST"])
def create_payment():
    body = request.json
    data = {
        "amount": body["amount"],
        "currency": body["currency"],
        "recipient": body["recipient"],
        "callback_url": "https://ton-site.com/payment-callback",
        "metadata": body.get("metadata", {})
    }
    resp = requests.post(f"{API_BASE}/transfers", json=data, headers=HEADERS)
    return jsonify(resp.json()), resp.status_code

@app.route("/payment-callback", methods=["POST"])
def payment_callback():
    notification = request.json
    # vérifier signature si applicable
    # mettre à jour statut dans ta BD selon notification["status"]
    return "", 200

if __name__ == "__main__":
    app.run(port=5000)
```

